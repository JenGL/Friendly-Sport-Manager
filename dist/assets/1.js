(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{18:function(e,i,a){var t=a(20);"string"==typeof t&&(t=[[e.i,t,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0};a(2)(t,s);t.locals&&(e.exports=t.locals)},19:function(e,i,a){"use strict";var t=a(18);a.n(t).a},20:function(e,i,a){(e.exports=a(1)(!1)).push([e.i,"\n.md-app[data-v-284fbf0e]{max-height:400px;border:1px solid rgba(0,0,0,.12)\n}\n.md-drawer[data-v-284fbf0e]{width:230px;max-width:calc(100vw - 125px)\n}",""])},21:function(e,i,a){"use strict";a.r(i);var t=function(){var e=this,i=e.$createElement,a=e._self._c||i;return a("div",{staticClass:"page-container"},[a("md-app",{attrs:{"md-mode":"reveal"}},[a("md-app-toolbar",{staticClass:"md-primary"},[a("md-button",{staticClass:"md-icon-button",on:{click:function(i){e.menuVisible=!e.menuVisible}}},[a("md-icon",[e._v("menu")])],1),e._v(" "),a("span",{staticClass:"md-title"},[e._v("My Title")])],1),e._v(" "),a("md-app-drawer",{attrs:{"md-active":e.menuVisible},on:{"update:mdActive":function(i){e.menuVisible=i}}},[a("md-toolbar",{staticClass:"md-transparent",attrs:{"md-elevation":"0"}},[e._v("Navigation")]),e._v(" "),a("md-list",[a("md-list-item",[a("md-icon",[e._v("move_to_inbox")]),e._v(" "),a("span",{staticClass:"md-list-item-text"},[e._v("Inbox")])],1),e._v(" "),a("md-list-item",[a("md-icon",[e._v("send")]),e._v(" "),a("span",{staticClass:"md-list-item-text"},[e._v("Sent Mail")])],1),e._v(" "),a("md-list-item",[a("md-icon",[e._v("delete")]),e._v(" "),a("span",{staticClass:"md-list-item-text"},[e._v("Trash")])],1),e._v(" "),a("md-list-item",[a("md-icon",[e._v("error")]),e._v(" "),a("span",{staticClass:"md-list-item-text"},[e._v("Spam")])],1)],1)],1),e._v(" "),a("md-app-content",[a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")]),e._v(" "),a("p",[e._v("Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error quibusdam, non molestias et! Earum magnam, similique, quo recusandae placeat dicta asperiores modi sint ea repudiandae maxime? Quae non explicabo, neque.")])])],1)],1)};t._withStripped=!0;var s={name:"Reveal",data:function(){return{menuVisible:!1}}};a(19);var n=function(e,i,a,t,s,n,o,r){var m,u="function"==typeof e?e.options:e;if(i&&(u.render=i,u.staticRenderFns=a,u._compiled=!0),t&&(u.functional=!0),n&&(u._scopeId="data-v-"+n),o?(m=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),s&&s.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(o)},u._ssrRegister=m):s&&(m=r?function(){s.call(this,this.$root.$options.shadowRoot)}:s),m)if(u.functional){u._injectStyles=m;var d=u.render;u.render=function(e,i){return m.call(i),d(e,i)}}else{var c=u.beforeCreate;u.beforeCreate=c?[].concat(c,m):[m]}return{exports:e,options:u}}(s,t,[],!1,null,"284fbf0e",null);n.options.__file="app/page/index.vue";i.default=n.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,